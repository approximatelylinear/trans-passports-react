'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _actions = require('./actions');

var warning = function warning(condition, message) {
  if (process.env.NODE_ENV !== 'production' && condition) {
    /* eslint-disable no-console */
    console.warn('[redux-wait] ' + message);
    /* eslint-enable no-console */
  }
};

var mapAction = function mapAction(_ref) {
  var promise = _ref.promise;
  var action = _ref.action;
  return promise.then(function (result) {
    return { action: action, result: result };
  }, function (error) {
    return { action: action, error: error };
  });
};

/**
 * Create a function that awaits all promises in the `redux-wait` store.
 *
 * @function
 *
 * @param {Function} callback A callback function.
 *
 * @param {Object} store A redux store enhanced with `redux-wait`.
 *
 * @param {Number} options.maxIterations The maximum number callback iterations.
 *
 * @param {Number} options.storeName The name of the property containing the
 * `waitStore` on the base store object, this should match the same config
 * option provided to `waitEnhancer()`.
 *
 * @returns {Function} A function that returns a promise.
 */

exports.default = function (callback, store) {
  var _ref2 = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var _ref2$maxIterations = _ref2.maxIterations;
  var maxIterations = _ref2$maxIterations === undefined ? 2 : _ref2$maxIterations;
  var _ref2$storeName = _ref2.storeName;
  var storeName = _ref2$storeName === undefined ? 'waitStore' : _ref2$storeName;

  warning(maxIterations < 2, 'A `maxIterations` value of less than 2 will not wait for any actions to ' + 'resolve. Specify a higher value.');

  var waitStore = store[storeName];

  warning(!waitStore, 'The provided store must be created using the `waitEnhancer`.');

  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var iterate = function iterate() {
      var count = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];

      var start = Date.now();

      var renderResult = callback.apply(undefined, args);

      var _waitStore$getState = waitStore.getState();

      var actions = _waitStore$getState.actions;

      waitStore.dispatch((0, _actions.clearActions)());

      if (count < maxIterations) {
        if (actions.length) {
          return Promise.all(actions.map(mapAction)).then(function (results) {
            var duration = Date.now() - start;
            waitStore.dispatch((0, _actions.stats)({
              results: results,
              duration: duration
            }));
            return iterate(count + 1);
          });
        }

        return Promise.resolve(renderResult);
      }

      warning(actions.length, 'Callback completed with unresolved actions. Specify a higher ' + 'value for the `maxIterations` option or reduce the depth of async ' + 'action creator calls.');

      return Promise.resolve(renderResult);
    };

    return iterate();
  };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jcmVhdGUtd2FpdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUVBLElBQU0sVUFBVSxTQUFWLE9BQVUsQ0FBQyxTQUFELEVBQVksT0FBWixFQUF3QjtBQUN0QyxNQUFJLFFBQVEsR0FBUixDQUFZLFFBQVosS0FBeUIsWUFBekIsSUFBeUMsU0FBekMsRUFBb0Q7O0FBRXRELFlBQVEsSUFBUixtQkFBNkIsT0FBN0I7O0FBRnNELEdBQXhEO0NBRGM7O0FBUWhCLElBQU0sWUFBWSxTQUFaLFNBQVk7TUFBRztNQUFTO1NBQVksUUFBUSxJQUFSLENBQ3hDLFVBQUMsTUFBRDtXQUFhLEVBQUUsY0FBRixFQUFVLGNBQVY7R0FBYixFQUNBLFVBQUMsS0FBRDtXQUFZLEVBQUUsY0FBRixFQUFVLFlBQVY7R0FBWjtDQUZnQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0JBc0JILFVBQUMsUUFBRCxFQUFXLEtBQVgsRUFHSjtvRUFBUCxrQkFBTzs7a0NBRlQsY0FFUztNQUZULG9EQUFnQix3QkFFUDs4QkFEVCxVQUNTO01BRFQsNENBQVksOEJBQ0g7O0FBQ1QsVUFDRSxnQkFBZ0IsQ0FBaEIsRUFDQSw2RUFDQSxrQ0FEQSxDQUZGLENBRFM7O0FBT1QsTUFBTSxZQUFZLE1BQU0sU0FBTixDQUFaLENBUEc7O0FBU1QsVUFDRSxDQUFDLFNBQUQsRUFDQSw4REFGRixFQVRTOztBQWNULFNBQU8sWUFBYTtzQ0FBVDs7S0FBUzs7QUFDbEIsUUFBTSxVQUFVLFNBQVYsT0FBVSxHQUFlO1VBQWQsOERBQVEsaUJBQU07O0FBQzdCLFVBQU0sUUFBUSxLQUFLLEdBQUwsRUFBUixDQUR1Qjs7QUFHN0IsVUFBTSxlQUFlLDBCQUFZLElBQVosQ0FBZixDQUh1Qjs7Z0NBS1QsVUFBVSxRQUFWLEdBTFM7O1VBS3JCLHNDQUxxQjs7QUFNN0IsZ0JBQVUsUUFBVixDQUFtQiw0QkFBbkIsRUFONkI7O0FBUTdCLFVBQUksUUFBUSxhQUFSLEVBQXVCO0FBQ3pCLFlBQUksUUFBUSxNQUFSLEVBQWdCO0FBQ2xCLGlCQUFPLFFBQVEsR0FBUixDQUFZLFFBQVEsR0FBUixDQUFZLFNBQVosQ0FBWixFQUNKLElBREksQ0FDQyxVQUFDLE9BQUQsRUFBYTtBQUNqQixnQkFBTSxXQUFXLEtBQUssR0FBTCxLQUFhLEtBQWIsQ0FEQTtBQUVqQixzQkFBVSxRQUFWLENBQW1CLG9CQUFNO0FBQ3ZCLDhCQUR1QjtBQUV2QixnQ0FGdUI7YUFBTixDQUFuQixFQUZpQjtBQU1qQixtQkFBTyxRQUFRLFFBQVEsQ0FBUixDQUFmLENBTmlCO1dBQWIsQ0FEUixDQURrQjtTQUFwQjs7QUFZQSxlQUFPLFFBQVEsT0FBUixDQUFnQixZQUFoQixDQUFQLENBYnlCO09BQTNCOztBQWdCQSxjQUNFLFFBQVEsTUFBUixFQUNBLGtFQUNBLG9FQURBLEdBRUEsdUJBRkEsQ0FGRixDQXhCNkI7O0FBK0I3QixhQUFPLFFBQVEsT0FBUixDQUFnQixZQUFoQixDQUFQLENBL0I2QjtLQUFmLENBREU7O0FBbUNsQixXQUFPLFNBQVAsQ0FuQ2tCO0dBQWIsQ0FkRTtDQUhJIiwiZmlsZSI6ImNyZWF0ZS13YWl0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xlYXJBY3Rpb25zLCBzdGF0cyB9IGZyb20gJy4vYWN0aW9ucyc7XG5cbmNvbnN0IHdhcm5pbmcgPSAoY29uZGl0aW9uLCBtZXNzYWdlKSA9PiB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmRpdGlvbikge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgICBjb25zb2xlLndhcm4oYFtyZWR1eC13YWl0XSAke21lc3NhZ2V9YCk7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG4gIH1cbn07XG5cbmNvbnN0IG1hcEFjdGlvbiA9ICh7IHByb21pc2UsIGFjdGlvbiB9KSA9PnByb21pc2UudGhlbihcbiAgKHJlc3VsdCkgPT4gKHsgYWN0aW9uLCByZXN1bHQgfSksXG4gIChlcnJvcikgPT4gKHsgYWN0aW9uLCBlcnJvciB9KSxcbik7XG5cbi8qKlxuICogQ3JlYXRlIGEgZnVuY3Rpb24gdGhhdCBhd2FpdHMgYWxsIHByb21pc2VzIGluIHRoZSBgcmVkdXgtd2FpdGAgc3RvcmUuXG4gKlxuICogQGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc3RvcmUgQSByZWR1eCBzdG9yZSBlbmhhbmNlZCB3aXRoIGByZWR1eC13YWl0YC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5tYXhJdGVyYXRpb25zIFRoZSBtYXhpbXVtIG51bWJlciBjYWxsYmFjayBpdGVyYXRpb25zLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnN0b3JlTmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgY29udGFpbmluZyB0aGVcbiAqIGB3YWl0U3RvcmVgIG9uIHRoZSBiYXNlIHN0b3JlIG9iamVjdCwgdGhpcyBzaG91bGQgbWF0Y2ggdGhlIHNhbWUgY29uZmlnXG4gKiBvcHRpb24gcHJvdmlkZWQgdG8gYHdhaXRFbmhhbmNlcigpYC5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgcHJvbWlzZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgKGNhbGxiYWNrLCBzdG9yZSwge1xuICBtYXhJdGVyYXRpb25zID0gMixcbiAgc3RvcmVOYW1lID0gJ3dhaXRTdG9yZScsXG59ID0ge30pID0+IHtcbiAgd2FybmluZyhcbiAgICBtYXhJdGVyYXRpb25zIDwgMixcbiAgICAnQSBgbWF4SXRlcmF0aW9uc2AgdmFsdWUgb2YgbGVzcyB0aGFuIDIgd2lsbCBub3Qgd2FpdCBmb3IgYW55IGFjdGlvbnMgdG8gJyArXG4gICAgJ3Jlc29sdmUuIFNwZWNpZnkgYSBoaWdoZXIgdmFsdWUuJ1xuICApO1xuXG4gIGNvbnN0IHdhaXRTdG9yZSA9IHN0b3JlW3N0b3JlTmFtZV07XG5cbiAgd2FybmluZyhcbiAgICAhd2FpdFN0b3JlLFxuICAgICdUaGUgcHJvdmlkZWQgc3RvcmUgbXVzdCBiZSBjcmVhdGVkIHVzaW5nIHRoZSBgd2FpdEVuaGFuY2VyYC4nXG4gICk7XG5cbiAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgaXRlcmF0ZSA9IChjb3VudCA9IDEpID0+IHtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcblxuICAgICAgY29uc3QgcmVuZGVyUmVzdWx0ID0gY2FsbGJhY2soLi4uYXJncyk7XG5cbiAgICAgIGNvbnN0IHsgYWN0aW9ucyB9ID0gd2FpdFN0b3JlLmdldFN0YXRlKCk7XG4gICAgICB3YWl0U3RvcmUuZGlzcGF0Y2goY2xlYXJBY3Rpb25zKCkpO1xuXG4gICAgICBpZiAoY291bnQgPCBtYXhJdGVyYXRpb25zKSB7XG4gICAgICAgIGlmIChhY3Rpb25zLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChhY3Rpb25zLm1hcChtYXBBY3Rpb24pKVxuICAgICAgICAgICAgLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnQ7XG4gICAgICAgICAgICAgIHdhaXRTdG9yZS5kaXNwYXRjaChzdGF0cyh7XG4gICAgICAgICAgICAgICAgcmVzdWx0cyxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICByZXR1cm4gaXRlcmF0ZShjb3VudCArIDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlbmRlclJlc3VsdCk7XG4gICAgICB9XG5cbiAgICAgIHdhcm5pbmcoXG4gICAgICAgIGFjdGlvbnMubGVuZ3RoLFxuICAgICAgICAnQ2FsbGJhY2sgY29tcGxldGVkIHdpdGggdW5yZXNvbHZlZCBhY3Rpb25zLiBTcGVjaWZ5IGEgaGlnaGVyICcgK1xuICAgICAgICAndmFsdWUgZm9yIHRoZSBgbWF4SXRlcmF0aW9uc2Agb3B0aW9uIG9yIHJlZHVjZSB0aGUgZGVwdGggb2YgYXN5bmMgJyArXG4gICAgICAgICdhY3Rpb24gY3JlYXRvciBjYWxscy4nXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlbmRlclJlc3VsdCk7XG4gICAgfTtcblxuICAgIHJldHVybiBpdGVyYXRlKCk7XG4gIH07XG59O1xuIl19