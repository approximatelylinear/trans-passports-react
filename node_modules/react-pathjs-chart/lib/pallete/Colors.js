"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Colors = (function () {
    function Colors() {
        _classCallCheck(this, Colors);
    }

    _createClass(Colors, [{
        key: "cut",
        value: function cut(x) {
            return Math.min(255, Math.floor(Math.abs(x)));
        }
    }, {
        key: "multiply",
        value: function multiply(factor) {
            return (function (c) {
                return {
                    r: this.cut(factor * c.r),
                    g: this.cut(factor * c.g),
                    b: this.cut(factor * c.b)
                };
            }).bind(this);
        }
    }, {
        key: "average",
        value: function average(c1, c2) {
            return {
                r: this.cut((c1.r + c2.r) / 2),
                g: this.cut((c1.g + c2.g) / 2),
                b: this.cut((c1.b + c2.b) / 2)
            };
        }
    }, {
        key: "lighten",
        value: function lighten(c) {
            return this.multiply(1.2)(c);
        }
    }, {
        key: "darken",
        value: function darken(c) {
            return this.multiply(0.8)(c);
        }
    }, {
        key: "darkenColor",
        value: function darkenColor(c) {
            return this.string(this.darken(this.hexToRgb(c)));
        }
    }, {
        key: "mix",
        value: function mix(color1) {
            var c1 = this.hexToRgb(color1);
            var c2 = this.multiply(0.5)(c1);
            var c3 = this.average(c1, c2);
            return [this.lighten(c1), c1, this.darken(c1), this.lighten(c3), c3, this.darken(c3), this.lighten(c2), c2, this.darken(c2)];
        }
    }, {
        key: "string",
        value: function string(c) {
            return this.rgbToHex(Math.floor(c.r), Math.floor(c.g), Math.floor(c.b));
            //return "rgb(" + (Math.floor(c.r)) + "," + (Math.floor(c.g)) + "," + (Math.floor(c.b)) + ")";
        }
    }, {
        key: "hexToRgb",
        value: function hexToRgb(hex) {
            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
        }
    }, {
        key: "componentToHex",
        value: function componentToHex(c) {
            var hex = c.toString(16);
            return hex.length == 1 ? "0" + hex : hex;
        }
    }, {
        key: "rgbToHex",
        value: function rgbToHex(r, g, b) {
            return "#" + this.componentToHex(r) + this.componentToHex(g) + this.componentToHex(b);
        }
    }]);

    return Colors;
})();

;
var colour = new Colors();
exports["default"] = colour;
module.exports = exports["default"];