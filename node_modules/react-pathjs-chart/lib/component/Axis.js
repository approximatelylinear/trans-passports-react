'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _fontAdapterJs = require('../fontAdapter.js');

var _fontAdapterJs2 = _interopRequireDefault(_fontAdapterJs);

var Path = require('paths-js/path');

var AxisStruct = (function () {
    function AxisStruct(scale, options, chartArea, horizontal) {
        _classCallCheck(this, AxisStruct);

        this.scale = scale;
        this.options = options;
        this.chartArea = chartArea;
        this.margin = chartArea.margin;
        this.horizontal = horizontal;
    }

    _createClass(AxisStruct, [{
        key: 'axis',
        value: function axis() {

            var horizontal = this.horizontal;

            var xAxis = this.chartArea.x;
            var yAxis = this.chartArea.y;
            var currentAxis = horizontal ? xAxis : yAxis;

            var tickInterval = this.options.tickCount || 10;

            var ticks = this.options.tickValues !== undefined && this.options.tickValues.length !== 0 ? _lodash2['default'].map(this.options.tickValues, function (v) {
                return v.value;
            }) : AxisStruct.getTickValues(currentAxis, tickInterval);

            var fixed = this.options.zeroAxis ? this.scale(0) : horizontal ? yAxis.min : xAxis.min;

            var start = { x: horizontal ? xAxis.min : fixed, y: horizontal ? fixed : yAxis.min };
            var end = { x: horizontal ? xAxis.max : fixed, y: horizontal ? fixed : yAxis.max };

            var margin = this.margin;
            if (margin !== undefined) {
                if (horizontal) {
                    start.x -= margin.left || 0;
                    end.x += margin.right || 0;
                } else {
                    start.y += margin.bottom || 0;
                    end.y -= margin.top || 0;
                }
            }

            return {
                item: currentAxis,
                path: Path().moveto(start).lineto(end).closepath(),
                ticks: ticks,
                lines: _lodash2['default'].map(ticks, function (c) {
                    var lineStart = { x: horizontal ? this.scale(c) : xAxis.min, y: horizontal ? yAxis.min : this.scale(c) };
                    return Path().moveto(lineStart).lineto(horizontal ? lineStart.x : xAxis.max, horizontal ? yAxis.max : lineStart.y);
                }, this)
            };
        }
    }], [{
        key: 'calcStepSize',
        value: function calcStepSize(range, targetSteps) {
            // calculate an initial guess at step size
            var tempStep = range / targetSteps;

            // get the magnitude of the step size
            var mag = Math.floor(Math.log(tempStep) / Math.log(10));
            var magPow = Math.pow(10, mag);

            // calculate most significant digit of the new step size
            var magMsd = Math.round(tempStep / magPow + 0.5);

            // promote the MSD to either 1, 2, or 5
            if (magMsd > 5.0) magMsd = 10.0;else if (magMsd > 2.0) magMsd = 5.0;else if (magMsd > 1.0) magMsd = 2.0;

            return magMsd * magPow;
        }
    }, {
        key: 'getTickValues',
        value: function getTickValues(axis, tickCount) {
            //var tickStep = Math.round((axis.maxValue - axis.minValue) / tickCount, 0);
            var tickStep = AxisStruct.calcStepSize(axis.maxValue - axis.minValue, tickCount);
            return _lodash2['default'].range(axis.minValue, axis.maxValue + 1, tickStep);
        }
    }]);

    return AxisStruct;
})();

var Axis = (function (_React$Component) {
    _inherits(Axis, _React$Component);

    function Axis(props) {
        _classCallCheck(this, Axis);

        _get(Object.getPrototypeOf(Axis.prototype), 'constructor', this).call(this, props);
    }

    _createClass(Axis, [{
        key: 'render',
        value: function render() {
            var chartArea = this.props.chartArea;
            var options = this.props.options;
            var scale = this.props.scale;
            var horizontal = options.orient === "top" || options.orient === "bottom";

            var axis = new AxisStruct(this.props.scale, this.props.options, chartArea, horizontal).axis();

            var translate = function translate(c) {
                var pair = horizontal ? [scale(c), chartArea.y.min] : [chartArea.x.min, scale(c)];
                return "translate(" + pair[0] + "," + pair[1] + ")";
            };

            var transparent = { opacity: 0.5 };
            var textAnchor = "start";
            if (options.orient === "top" || options.orient === "bottom") textAnchor = "middle";
            if (options.orient === "left") textAnchor = "end";
            if (options.orient === "right") textAnchor = "start";

            var xy = [0, 0];
            if (options.orient === "top") xy = [0, -5];
            if (options.orient === "bottom") xy = [0, 20];
            if (options.orient === "left") xy = [-5, 0];
            if (options.orient === "right") xy = [5, 0];

            var textTransform = "translate(" + xy[0] + "," + xy[1] + ")";

            var textStyle = (0, _fontAdapterJs2['default'])(options.label);

            var ticks = _lodash2['default'].map(axis.ticks, function (c, i) {
                var label = options.labelComponent !== undefined ? _react2['default'].cloneElement(options.labelComponent, { value: c }) : c;
                return _react2['default'].createElement(
                    'g',
                    { key: i, transform: translate(c) },
                    options.showTicks ? _react2['default'].createElement('circle', { r: '2', cx: '0', cy: '0', stroke: 'grey', fill: 'grey' }) : null,
                    options.showLabels ? _react2['default'].createElement(
                        'text',
                        { transform: textTransform, style: textStyle, textAnchor: textAnchor },
                        label
                    ) : null
                );
            });

            var gridLines = options.showLines ? _lodash2['default'].map(axis.lines, function (c, i) {
                return _react2['default'].createElement('path', { key: "gridLines" + i, d: c.print(), style: transparent, stroke: '#3E90F0', fill: 'none' });
            }) : [];

            return _react2['default'].createElement(
                'g',
                null,
                options.showAxis ? _react2['default'].createElement('path', { d: axis.path.print(), style: transparent, stroke: '#3E90F0', strokeWidth: 3, fill: 'none' }) : null,
                ticks,
                gridLines
            );
        }
    }]);

    return Axis;
})(_react2['default'].Component);

exports['default'] = Axis;
module.exports = exports['default'];