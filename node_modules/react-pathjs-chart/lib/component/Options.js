'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var ChartOptions = (function () {
    function ChartOptions(props) {
        _classCallCheck(this, ChartOptions);

        //var noDataMsg = this.props.noDataMessage || "No data available";
        //if (this.props.data === undefined) return (<span>{noDataMsg}</span>);
        this.options = props.options || {};

        this.chartWidth = this.options.width || 400;
        this.chartHeight = this.options.height || 400;

        //margins
        //add right + left
        this.width = this.chartWidth + (this.margin.right || 0) + (this.margin.left || 0);
        //add top + bottom
        this.height = this.chartHeight + (this.margin.top || 0) + (this.margin.bottom || 0);
    }

    _createClass(ChartOptions, [{
        key: 'legendPosition',
        get: function get() {
            return this.options.legendPosition || 'topLeft';
        }
    }, {
        key: 'axisX',
        get: function get() {
            return this.options.axisX || {};
        }
    }, {
        key: 'axisY',
        get: function get() {
            return this.options.axisY || {};
        }
    }, {
        key: 'margin',
        get: function get() {
            return this.options.margin || {};
        }
    }, {
        key: 'stroke',
        get: function get() {
            return this.options.stroke;
        }
    }, {
        key: 'fill',
        get: function get() {
            return this.options.fill;
        }
    }, {
        key: 'r',
        get: function get() {
            return this.options.r;
        }
    }, {
        key: 'label',
        get: function get() {
            return this.options.label || {};
        }
    }, {
        key: 'animate',
        get: function get() {
            return this.options.animate || {};
        }
    }]);

    return ChartOptions;
})();

exports['default'] = ChartOptions;
module.exports = exports['default'];